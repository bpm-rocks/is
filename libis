#!/usr/bin/env bash

# Determine if a given environment variable exists and if it is an array.
# This is true for normal arrays and for associative arrays.
#
# $1 - Name of environment variable.
#
# Examples
#
#   var=(abc)
#
#   if is::array var; then
#       echo "This is an array"
#       echo "Be careful to use the variable's name in the function call."
#   fi
#
#   declare -A associativeArray
#   associativeArray[test]=value
#
#   if is::array associativeArray; then
#       echo "This is also an array"
#   fi
#
#   right=wrong
#   wrong=()
#
#   if is::array $right; then
#       echo "This also says it is an array, which is incorrect."
#       echo 'The correct call is `is::array right` without the $.'
#   fi
#
# Returns true (0) if the named variable exists and if it is an array.
# Returns false (1) otherwise.
is::array() {
    [[ "$(declare -p "$1" 2> /dev/null)" == "declare -"[aA]* ]]
}


# Determine if a given environment variable exists and if it is an associative
# array.
#
# $1 - Name of environment variable.
#
# Examples
#
#   declare -A associativeArray
#   associativeArray[test]=value
#
#   if is::associativeArray associativeArray; then
#       echo "This is also an array"
#   fi
#
#   var=(abc)
#
#   if is::associativeArray var; then
#       echo "This is false - $var is not an associative array"
#   fi
#
# Returns true (0) if the named variable exists and if it is an associative
# array. Returns false (1) otherwise.
is::associativeArray() {
    [[ "$(declare -p "$1" 2> /dev/null)" == "declare -A"* ]]
}


# Determine if the given name is a defined function.
#
# $1 - Function name to check.
#
# Examples
#
#   moo () {
#       echo "This is a function"
#   }
#
#   if is::function moo; then
#       echo "moo is a defined function"
#   fi
#
# Returns true (0) if the name is a function, false (1) otherwise.
is::function() {
    if declare -Ff "$1" > /dev/null; then
        return 0
    fi

    return 1
}


# Determine if a variable is assigned, even if it is assigned an empty value.
#
# $1 - Variable name to check.
#
# Examples
#
#   unset abc
#
#   if ! is::set abc; then
#       echo "The variable is not set"
#   fi
#
#   abc=""
#
#   if is::set abc; then
#       echo "This is true, the variable is set"
#   fi
#
# Returns true (0) if the variable is set, false (1) if the variable is unset.
is::set() {
    [[ "${!1-a}" == "${!1-b}" ]]
}
